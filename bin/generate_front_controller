#!/usr/bin/env php
<?php
$config_file = './.apiconfig';
if (!file_exists($config_file) || !is_readable($config_file)) {
    fwrite(STDERR, ".apiconfig file not found\n");
    exit(1);
}
$config = json_decode(file_get_contents($config_file));
if (JSON_ERROR_NONE !== json_last_error()) {
    fwrite(STDERR, ".apiconfig contains invalid JSON\n");
    exit(1);
}
// TODO: use config file meaningfully


$fc = <<<'php'
<?php
// load autoloader
$dir = __DIR__;
while (!file_exists($dir.'/vendor/autoload.php') && $dir != DIRECTORY_SEPARATOR) {
    $dir = dirname($dir);
}
require $dir.'/vendor/autoload.php';

use Firehed\Common\ClassMapper;
use Firehed\API\Dispatcher;
use Psr\Http\Message\ResponseInterface;
use Zend\Diactoros\ServerRequestFactory;
use Zend\Diactoros\Response\JsonResponse;

// All of these assume HTTP request and will puke on CLI use
$d = new Dispatcher();
$response = (new Dispatcher())
    ->setEndpointList('__endpoint_list__.json')
    ->setParserList('__parser_list__.json')
    ->setRequest(ServerRequestFactory::fromGlobals())
    // ->addMiddleware(function(){}) ...
    ->dispatch();

// If PHP<=7.0.0, assert response type since return values aren't yet hintable
if (!$response instanceof ResponseInterface) {
    $response = new JsonResponse([
        'error' => 'Internal server error',
    ], 500);
}

// Send HTTP code
header(sprintf("HTTP/%s %s %s",
    $response->getProtocolVersion(),
    $response->getStatusCode(),
    $response->getReasonPhrase()));
// Additional headers
foreach ($response->getHeaders() as $key => $values) {
    foreach ($values as $value) {
        header(sprintf("%s: %s", $key, $value), false);
    }
}
// And then the body
echo $response->getBody();

php;

// TODO: write to file
echo $fc;
